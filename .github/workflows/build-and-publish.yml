name: Build and publish open3e distribution

on:
  push:
    branches:
      - master

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  pre-release-check:
    runs-on: ubuntu-latest

    outputs:
      build_version: ${{ steps.project-version.outputs.PROJECT_VERSION }}
      last_release_tag: ${{ steps.last-release-tag.outputs.LAST_RELEASE_TAG }}
      release_required: ${{ steps.release-required.outputs.RELEASE_REQUIRED }}

    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false
          fetch-depth: 0 # to get all tags

      - id: project-version
        name: Extract project version
        run: echo "PROJECT_VERSION=$(grep -Po '(?<=^version = ")[^"]+' pyproject.toml)" >> "$GITHUB_OUTPUT"

      - id: last-release-tag
        name: Get last git release tag
        run: echo "LAST_RELEASE_TAG=$(git tag --sort=-v:refname | head -n 1)" >> $GITHUB_OUTPUT

      - id: release-required
        name: Check if release is required
        env:
          LAST_RELEASE_TAG: ${{ steps.last-release-tag.outputs.last_release_tag}}
          PROJECT_VERSION: ${{ steps.project-version.outputs.project_version }}
        shell: python
        run: |
          from packaging.version import Version
          import os, sys

          last_release_tag = os.getenv("LAST_RELEASE_TAG", "0.0.0")
          project_version = os.getenv("PROJECT_VERSION", "0.0.0")

          if Version(project_version) > Version(last_release_tag):
              print(f"Project version {project_version} is greater than latest release tag {last_release_tag}, start full release workflow ...")
              with open(os.getenv('GITHUB_OUTPUT'), 'a') as f:
                  f.write("RELEASE_REQUIRED=true\n")
          else:
              print(f"Project version {project_version} is NOT greater than latest release tag {last_release_tag}, no release required.")
              with open(os.getenv('GITHUB_OUTPUT'), 'a') as f:
                  f.write("RELEASE_REQUIRED=false\n")

  python-build:
    if: needs.pre-release-check.outputs.release_required == 'true'

    runs-on: ubuntu-latest

    needs:
      - pre-release-check

    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Install pypa/build
        run: >-
          python3 -m
          pip install
          build
          --user

      - name: Build a binary wheel and a source tarball
        run: python3 -m build

      - name: Store the distribution packages
        uses: actions/upload-artifact@v4
        with:
          name: python-package-distributions
          path: dist/

  github-release:
    if: needs.pre-release-check.outputs.release_required == 'true'

    runs-on: ubuntu-latest

    needs:
      - pre-release-check
      - python-build

    permissions:
      contents: write  # mandatory for making GitHub Releases
      id-token: write  # mandatory for sigstore

    steps:
      - name: Download all the dists
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/

      - name: Sign the dists with Sigstore
        uses: sigstore/gh-action-sigstore-python@v3.0.0
        with:
          inputs: >-
            ./dist/*.tar.gz
            ./dist/*.whl

      - name: Create GitHub Release
        env:
          LAST_RELEASE_TAG: ${{needs.pre-release-check.outputs.last_release_tag}}
          BUILD_VERSION: ${{needs.pre-release-check.outputs.build_version}}
          GITHUB_TOKEN: ${{ github.token }}
        run: >-
          gh release create
          "$BUILD_VERSION"
          --repo "$GITHUB_REPOSITORY"
          --target "$GITHUB_REF"
          --generate-notes
          --notes-start-tag "$LAST_RELEASE_TAG"

      - name: Upload artifacts and signatures to GitHub Release
        env:
          BUILD_VERSION: ${{needs.pre-release-check.outputs.build_version}}
          GITHUB_TOKEN: ${{ github.token }}
        run: >-
          gh release upload
          "$BUILD_VERSION" dist/**
          --repo "$GITHUB_REPOSITORY"

  pypi-publish:
    if: needs.pre-release-check.outputs.release_required == 'true'

    runs-on: ubuntu-latest

    permissions:
      id-token: write # https://docs.pypi.org/trusted-publishers/

    needs:
      - pre-release-check
      - python-build

    steps:
      - name: Download all the dists
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/

      - name: Publish distribution to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          # TODO: switch to pypi.org for release builds. use test.pypi for non release builds?
          repository-url: https://test.pypi.org/legacy/

      - name: Check if PyPi release is available
        run: |
          PACKAGE_NAME="open3e-lgraf"
          PACKAGE_VERSION="${{ needs.pre-release-check.outputs.build_version }}"
          for i in {1..10}; do
            if [ "$(curl -s -o /dev/null -I -w "%{http_code}" "https://test.pypi.org/pypi/${PACKAGE_NAME}/${PACKAGE_VERSION}/json")" == "200" ]; then
              echo "Release is available on PyPI, proceeding ...";
              exit 0;
            fi;
            echo "Package not found. Retrying in 30 seconds...";
            sleep 30;
          done;
          echo "Release did not appear on PyPI in time.";
          exit 1;


  docker-build-and-push:
    if: needs.pre-release-check.outputs.release_required == 'true'

    runs-on: ubuntu-latest

    needs:
      - pre-release-check
      - pypi-publish

    permissions:
      contents: read
      id-token: write
      packages: write
      attestations: write

    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Log in to container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up docker buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract metadata (tags, labels) for Docker
        env:
          BUILD_VERSION: ${{needs.pre-release-check.outputs.build_version}}
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=pep440,pattern={{version}},value=${{ env.BUILD_VERSION }}
            type=pep440,pattern={{major}}.{{minor}},value=${{ env.BUILD_VERSION }}

      - name: Build and push docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          build-args: VERSION=${{needs.pre-release-check.outputs.build_version}}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64