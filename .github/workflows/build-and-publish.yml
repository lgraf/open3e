name: Build and publish

on:
  workflow_dispatch:
    inputs:
      release_version:
        description: 'Release version (e.g. 1.2.3)'
        required: true
        type: string

jobs:
  run-tests:
    uses: ./.github/workflows/test.yml

  pre-release:
    runs-on: ubuntu-latest

    permissions:
      contents: read

    needs: run-tests

    outputs:
      release_version: ${{ github.event.inputs.release_version }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Install toml-cli for TOML parsing
        run: pip install toml-cli

      - name: Get project version for sanity check
        id: project-version
        run: |
          PROJECT_VERSION=$(toml get --toml-path pyproject.toml project.version)
          echo "current project version: '${PROJECT_VERSION}'"

          # make the project version available to the next steps
          echo "PROJECT_VERSION=${PROJECT_VERSION}" >> "$GITHUB_OUTPUT"

      - name: Sanity check for provied release version, to ensure proper versioning
        env:
          RELEASE_VERSION: ${{ github.event.inputs.release_version }}
          PROJECT_VERSION: ${{ steps.project-version.outputs.PROJECT_VERSION }}
        shell: python
        run: |
          from packaging.version import Version
          import os, sys

          release_version = os.getenv("RELEASE_VERSION")
          project_version = os.getenv("PROJECT_VERSION")

          release_valid = Version(release_version) == Version(project_version)
          if not release_valid:
              print(f"Provided release version {release_version} is not equal to project version {project_version}, aborting release ...")
              sys.exit(1)

  python-build:
    runs-on: ubuntu-latest

    permissions:
      contents: read

    needs:
      - pre-release

    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Set up Python to avoid version conflicts with default runner python installation
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Install build frontend for building python distributions
        run: pip install build --user

      - name: Build python distribution packages
        run: python3 -m build

      - name: Store distribution packages
        uses: actions/upload-artifact@v4
        with:
          name: python-package-distributions
          path: dist/