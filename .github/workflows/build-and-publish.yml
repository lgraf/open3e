# Note: renaming the workflow filename (build-and-publish.yml) will break pypi trusted publishing
# SEE: https://docs.pypi.org/trusted-publishers/security-model/#github-actions
name: Build and publish

on:
  workflow_dispatch:
    inputs:
      release_version:
        description: 'Release version (e.g. 1.2.3)'
        required: true
        type: string

env:
  DOCKER_REGISTRY: ghcr.io
  DOCKER_IMAGE_NAME: ${{ github.repository }}


jobs:
  run-tests:
    uses: ./.github/workflows/test.yml

  pre-release:
    runs-on: ubuntu-latest

    permissions:
      contents: read

    needs: run-tests

    outputs:
      release_version: ${{ github.event.inputs.release_version }}

    steps:
      - name: Checkout code to validate release version
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Install toml-cli for TOML parsing
        run: pip install toml-cli

      - name: Get project version for sanity check
        id: project-version
        run: |
          PROJECT_VERSION=$(toml get --toml-path pyproject.toml project.version)
          echo "current project version: '${PROJECT_VERSION}'"

          # make the project version available to the next steps
          echo "PROJECT_VERSION=${PROJECT_VERSION}" >> "$GITHUB_OUTPUT"

      - name: Sanity check for provied release version, to omit mistakes and ensure proper versioning
        env:
          RELEASE_VERSION: ${{ github.event.inputs.release_version }}
          PROJECT_VERSION: ${{ steps.project-version.outputs.PROJECT_VERSION }}
        shell: python
        run: |
          from packaging.version import Version
          import os, sys

          release_version = os.getenv("RELEASE_VERSION")
          project_version = os.getenv("PROJECT_VERSION")

          release_valid = Version(release_version) == Version(project_version)
          if not release_valid:
              print(f"Provided release version {release_version} is not equal to project version {project_version}, aborting release ...")
              sys.exit(1)

  python-build:
    runs-on: ubuntu-latest

    permissions:
      contents: read

    needs:
      - pre-release

    steps:
      - name: Checkout code for building python distributions
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Set up Python to avoid version conflicts with default runner python installation
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Install build frontend for building python distributions
        run: pip install build --user

      - name: Build python distribution packages
        run: python3 -m build --sdist --wheel

      - name: Store distribution packages
        uses: actions/upload-artifact@v4
        with:
          name: python-package-distributions
          path: dist/

  pypi-publish:
    runs-on: ubuntu-latest

    permissions:
      id-token: write # https://docs.pypi.org/trusted-publishers/

    needs:
      - pre-release
      - python-build

    steps:
      - name: Download python distribution packages
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/

      - name: Publish distribution to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          # TODO: switch to pypi.org for release builds. use test.pypi for non release builds?
          repository-url: https://test.pypi.org/legacy/
          verbose: true

  docker-build-and-push:
    runs-on: ubuntu-latest

    needs:
      - pre-release
      - python-build

    permissions:
      contents: read
      id-token: write # push docker images to registry
      packages: write
      attestations: write

    steps:
      - name: Checkout code to build docker image from Dockerfile
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Download python distribution packages for local pip (wheel) installation in Dockerfile
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/

      - name: Log in to container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up docker buildx
        uses: docker/setup-buildx-action@v3

      - name: Generate metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        env:
          DOCKER_METADATA_ANNOTATIONS_LEVELS: manifest,index # attach annotations to image manifest so they are use by ghcr.io
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE_NAME }}
          tags: |
            type=pep440,pattern={{version}},value=${{ needs.pre-release.outputs.release_version }}
            type=pep440,pattern={{major}}.{{minor}},value=${{ needs.pre-release.outputs.release_version }}

      - name: Build and push docker image
        id: docker-push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          annotations: ${{ steps.meta.outputs.annotations }}
          platforms: linux/amd64,linux/arm64

      - name: Generate and push docker image attestation
        uses: actions/attest-build-provenance@v2
        with:
          subject-name: ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE_NAME}}
          subject-digest: ${{ steps.docker-push.outputs.digest }}
          push-to-registry: true

  github-release:
    runs-on: ubuntu-latest

    needs:
      - pre-release
      - python-build

    permissions:
      contents: write  # create gh release


    steps:
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ needs.pre-release.outputs.release_version }} # use recommended tag versioning format (vX.Y.Z)
          name: ${{ needs.pre-release.outputs.release_version }}
          generate_release_notes: true
          draft: false
          prerelease: false